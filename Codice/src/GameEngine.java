/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

import java.util.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.time.*;

//Gestisce la logica di gioco, inclusi il movimento dei personaggi, le collisioni e le interazioni di gioco.
public class GameEngine extends JFrame {
	
	public static void main(String[] args) {
		GameEngine f = new GameEngine();

	}
	public void init() {
		setLayout( new GridLayout(1,1,0,0));
		setLocationRelativeTo(null);
		InputManager s = new InputManager();
		setVisible(true);
	}
	  private final int BLOCK_SIZE = 24;
	    private final int N_BLOCKS = 15;
	    private final int SCREEN_SIZE = N_BLOCKS * BLOCK_SIZE;
	    private short[] screenData;

	public GameEngine() {
		super("UniPac-Man");
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(500, 500);
		setLocation(200, 200);
		getContentPane().setBackground(Color.black);
		setResizable(false);
		
		screenData = new short[N_BLOCKS * N_BLOCKS];
		init();
		
		
	}
	private final short levelData[] = {
	    	19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,
	        17, 16, 16, 16, 16, 24, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        25, 24, 24, 24, 28, 0, 17, 16, 16, 16, 16, 16, 16, 16, 20,
	        0,  0,  0,  0,  0,  0, 17, 16, 16, 16, 16, 16, 16, 16, 20,
	        19, 18, 18, 18, 18, 18, 16, 16, 16, 16, 24, 24, 24, 24, 20,
	        17, 16, 16, 16, 16, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 16, 16, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 16, 24, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 18, 18, 18, 18, 20,
	        17, 24, 24, 28, 0, 25, 24, 24, 16, 16, 16, 16, 16, 16, 20,
	        21, 0,  0,  0,  0,  0,  0,   0, 17, 16, 16, 16, 16, 16, 20,
	        17, 18, 18, 22, 0, 19, 18, 18, 16, 16, 16, 16, 16, 16, 20,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        25, 24, 24, 24, 26, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28
	    };
	
	 private void drawMaze(Graphics2D g2d) {

	        short i = 0;
	        int x, y;

	        for (y = 0; y < SCREEN_SIZE; y += BLOCK_SIZE) {
	            for (x = 0; x < SCREEN_SIZE; x += BLOCK_SIZE) {
	            	

	                g2d.setColor(new Color(0,72,251));
	                g2d.setStroke(new BasicStroke(5));
	                
	                if ((levelData[i] == 0)) { 
	                	g2d.fillRect(x, y, BLOCK_SIZE, BLOCK_SIZE);
	                 }

	                if ((screenData[i] & 1) != 0) { 
	                    g2d.drawLine(x, y, x, y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 2) != 0) { 
	                    g2d.drawLine(x, y, x + BLOCK_SIZE - 1, y);
	                }

	                if ((screenData[i] & 4) != 0) { 
	                    g2d.drawLine(x + BLOCK_SIZE - 1, y, x + BLOCK_SIZE - 1,
	                            y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 8) != 0) { 
	                    g2d.drawLine(x, y + BLOCK_SIZE - 1, x + BLOCK_SIZE - 1,
	                            y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 16) != 0) { 
	                    g2d.setColor(new Color(255,255,255));
	                    g2d.fillOval(x + 10, y + 10, 6, 6);
	               }

	                i++;
	            }
	        }
	    }
	
	
}