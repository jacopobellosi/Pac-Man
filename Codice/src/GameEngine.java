/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/


import java.util.*;
import java.time.*;

//Rappresenta un singolo livello del gioco, definendo la sua struttura, i personaggi, gli oggetti, ecc.
import java.awt.*;
import java.util.ArrayList;
import javax.swing.JPanel;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;


public class GameEngine extends JPanel implements Runnable{
 
	final int originalTitleSize = 16; // 16x16 title
	final int scale=3;
	final int titleSize = originalTitleSize * scale;
	
	
	final int maxScreenCol = 16;
	final int maxScreenRow = 12;
	final int screenWidth = titleSize * maxScreenCol;
	final int screenHeight = titleSize * maxScreenRow;
	int FPS=60;
	InputManager keyH = new InputManager();

	Thread gameThread;
	
	int playerX =100;
	int playerY =100;
	int playerSpeed =4;
	
	
	public GameEngine() {
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
		
	}
	private final short levelData[] = {
	    	19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22,
	        17, 16, 16, 16, 16, 24, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        25, 24, 24, 24, 28, 0, 17, 16, 16, 16, 16, 16, 16, 16, 20,
	        0,  0,  0,  0,  0,  0, 17, 16, 16, 16, 16, 16, 16, 16, 20,
	        19, 18, 18, 18, 18, 18, 16, 16, 16, 16, 24, 24, 24, 24, 20,
	        17, 16, 16, 16, 16, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 16, 16, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 16, 24, 16, 16, 16, 16, 20, 0,  0,  0,   0, 21,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 18, 18, 18, 18, 20,
	        17, 24, 24, 28, 0, 25, 24, 24, 16, 16, 16, 16, 16, 16, 20,
	        21, 0,  0,  0,  0,  0,  0,   0, 17, 16, 16, 16, 16, 16, 20,
	        17, 18, 18, 22, 0, 19, 18, 18, 16, 16, 16, 16, 16, 16, 20,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        17, 16, 16, 20, 0, 17, 16, 16, 16, 16, 16, 16, 16, 16, 20,
	        25, 24, 24, 24, 26, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28
	    };
	
	 private void drawMaze(Graphics2D g2d) {

	        short i = 0;
	        int x, y;

	        for (y = 0; y < SCREEN_SIZE; y += BLOCK_SIZE) {
	            for (x = 0; x < SCREEN_SIZE; x += BLOCK_SIZE) {
	            	

	                g2d.setColor(new Color(0,72,251));
	                g2d.setStroke(new BasicStroke(5));
	                
	                if ((levelData[i] == 0)) { 
	                	g2d.fillRect(x, y, BLOCK_SIZE, BLOCK_SIZE);
	                 }

	                if ((screenData[i] & 1) != 0) { 
	                    g2d.drawLine(x, y, x, y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 2) != 0) { 
	                    g2d.drawLine(x, y, x + BLOCK_SIZE - 1, y);
	                }

	                if ((screenData[i] & 4) != 0) { 
	                    g2d.drawLine(x + BLOCK_SIZE - 1, y, x + BLOCK_SIZE - 1,
	                            y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 8) != 0) { 
	                    g2d.drawLine(x, y + BLOCK_SIZE - 1, x + BLOCK_SIZE - 1,
	                            y + BLOCK_SIZE - 1);
	                }

	                if ((screenData[i] & 16) != 0) { 
	                    g2d.setColor(new Color(255,255,255));
	                    g2d.fillOval(x + 10, y + 10, 6, 6);
	               }

	                i++;
	            }
	        }
	    }
	
	
	public void StartGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		double drawInterval = 1000000000/FPS;
		double nextDrawTine = System.nanoTime();
		while(gameThread != null) {
			//System.out.print("ciao");
			//long currentTime = System.nanoTime();
			 
			//UPDATE
			update();
			//DRAW
			repaint();
			try {
				double remainingTime = nextDrawTine - System.nanoTime();
				remainingTime = remainingTime/1000000;
				if(remainingTime<0) {
					remainingTime =0;
				}
				Thread.sleep((long) remainingTime);
				nextDrawTine += drawInterval;
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public void update() {
		if(keyH.upPressed == true) {
			playerY -=playerSpeed;
		}else if(keyH.downPressed == true) {
			playerY +=playerSpeed;
		}else if(keyH.leftPressed == true) {
			playerX -=playerSpeed;
		}else if(keyH.rightPressed == true) {
			playerX +=playerSpeed;
		}
	}
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D)g;
		
		g2.setColor(Color.white);
		g2.fillRect(playerX, playerY, titleSize, titleSize);
		g2.dispose();
		
	}
}
